#!/usr/bin/env bash

#--------------------------------------------------------------------
# Copyright 2020- Bioinformatic and Genomics Lab.
# Hanyang University, Seoul, Korea
# Coded by Jang-il Sohn (sohnjangil@gmail.com)
#--------------------------------------------------------------------  


ETCHING="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"
INPUT_OPTIONS="$@"
ETCHING_PATH=$(dirname $(which $0) 2> /dev/null)

source ${ETCHING_PATH}/etching_parameters.sh
source ${ETCHING_PATH}/etching_function.sh

#####################################
# parsing arguments
#

if [[ $# -lt 1 ]]
then
    ETCHING_USAGE
    exit 1
fi

while [[ ${#1} != 0 ]]
do
    case $1 in

        -1 | --first )
	    shift
	    FIRST=$1
	    ;;

        -2 | --second )
	    shift
	    SECOND=$1
	    ;;

        -b | --bam )
	    shift
	    BAM=$1
	    ;;

        -g | --genome )
	    shift
	    GENOME=$1
	    ;;

        -o | --output | -p | --prefix)
	    shift
	    PREFIX=$1
	    ;;

        --output-dir )
	    shift
	    OUTDIR=$1
	    ;;

        --work-dir )
	    shift
	    WORKDIR=$1
	    ;;

        -t | --threads )
	    shift
	    THREADS=$1
	    ;;


	--bwa-T )
	    shift
	    BWA_T=$1
	    ;;


        -K | --kmer-cutoff )
	    shift
	    INPUT_KMER_CUTOFF=$1
	    ;;


        --max-kmer )
	    shift
	    MAXK=$1
	    ;;

        -I | --insert )
	    shift
	    INSERTSIZE=$1
	    ;;

        -O | --orientation )
	    shift
	    ORIENT=$1
	    ;;

        -1c | --first )
	    shift
	    FIRST_CONT=$1
	    ;;

        -2c | --second )
	    shift
	    SECOND_CONT=$1
	    ;;

        -bc | --bam )
	    shift
	    BAM_CONT=$1
	    ;;

	-f | --kmer-database )
	    shift
	    FILTER=$1
	    ;;

	--kmer-table )
	    shift
	    KMER_TABLE=$1
	    ;;

        -R | --random_forest )
	    ALGOR_R=1
            ;;

        -X | --xgboost )
	    ALGOR_X=1
            ;;

        -C | --cutoff )
	    shift
	    CUTOFF=$1
	    ;;


	--no-prep )
            PREPROCESSING=0;
            ;;

	--fast-bam | --fast-cram )
	    BAM_MODE="fast"
            ;;



        -m | --path-to-machine-learning-model )
	    shift
	    ETCHING_ML_PATH=$1
	    ;;

        -S | --samtools )
	    shift
	    SAMTOOLS=$1
	    ;;

        -B | --bwa )
	    shift
	    BWA=$1
	    ;;

        -E | --keep-kmc )
	    KEEP_KMC=1
            ;;


        -a | --annotation )
	    shift
	    ANNOTATION=$1
	    ;;

	--strand-aware )
	    STRAND_AWARE=1
	    ;;

        --fusion-window )
	    shift
	    FUSION_WINDOW=$1
	    ;;


        -h | --help )
	    ETCHING_USAGE
	    exit 1
	    ;;

        --example )
	    EXAMPLE
	    exit 1
	    ;;


        -v | --version )
	    echo -e ${ETCHING_VERSION}
	    echo -e "ML model version: ${MODEL_VERSION}"
            exit 1
            ;;

	* )
	    echo -e "\033[31m## ------------------------------------"
	    echo -e "## ERROR!!! $0 line ${LINENO}: Unavailable option: $1"
	    echo -e "## ------------------------------------\033[0m"
	    exit 1
	    ;;
    esac
    shift
done

#############################
#
# ETCHING starts here
#

echo -e "## --------------------------------------------------------------------------------------------"
echo -e "## [ETCHING START]"
echo -e "## Command: ${ETCHING} ${INPUT_OPTIONS}"

DATE

echo -e ""
echo -e


### Keep this until update with --no-filter
if (( ${#FIRST_CONT} + ${#SECOND_CONT} + ${#BAM_CONT} + ${#FILTER} == 0 ))
then
    echo -e "\033[31m## -----------------------------------"
    echo -e "## --no-filter mode is locked temporary."
    echo -e "## -----------------------------------"
    exit 1
fi

# Set environment to run etching
SET_ENVIRONMENT

# Check required ETCHING's modules, binaries, cripts, and files
CHECK_REQUIRED

# Update RUN_MODE
# fastq, bam, or cram
UPDATE_RUN_MODE

# Check options
CHECK_OPTIONS

# Check input files
CHECK_FILES ${ETCHING} ${LINENO}

# Set directories
# workdir and output-dir
SET_DIRECTORIES ${ETCHING} ${LINENO}

# Go to working directory
COMMAND ${ETCHING} ${LINENO} cd ${WORKDIR}
echo

#######################################################################################
#
# Check if reference genome was indexed
#

CHECK_REFERENCE_GENOME ${ETCHING} ${LINENO}

#######################################################################################
#
# Preparation for bam or cram input
#

if [[ "${RUN_MODE}" == "bam" ]]
then
    echo -e "## --------------------------------------------------------------------------------------------"
    echo -e "## [Preprocessing for bam input]"
    echo -e "## This step selects split-reads and improper pairs"
    BAM_PREPROCESSING ${ETCHING} ${LINENO}
    echo
fi

if [[ "${RUN_MODE}" == "cram" ]]
then
    echo -e "## --------------------------------------------------------------------------------------------"
    echo -e "## [Preprocessing for cram input]"
    echo -e "## This step selects split-reads and improper pairs"
    CRAM_PREPROCESSING ${ETCHING} ${LINENO}
    echo
fi

#############################
#
# ETCHING FILTER
#

## set arguments
echo 
echo -e "## --------------------------------------------------------------------------------------------"
echo -e "## [FILTER]"

REQUIRED=
OPTIONS=

if (( ${#FIRST} + ${#SECOND} == 0 ))
then
    echo -e "\033[31m## ------------------------------------"
    echo -e "## ERROR!!! No input for etching_filter"
    echo -e "## ------------------------------------\033[0m"
    exit 1
fi

REQUIRED="-1 ${FIRST} -2 ${SECOND} -g ${GENOME}"
if (( ${#FIRST_CONT} + ${#SECOND_CONT} != 0 ))
then
    OPTIONS="${OPTIONS} -1c ${FIRST_CONT}"
    OPTIONS="${OPTIONS} -2c ${SECOND_CONT}"
fi

OPTIONS="${OPTIONS} -o $PREFIX"

if [[ ${#FILTER} != 0 ]]
then
    OPTIONS="${OPTIONS} -f ${FILTER}"
fi

if [[ ${#CUSTOM_KMER_TABLE} != 0 ]]
then
    OPTIONS="${OPTIONS} --kmer-table ${CUSTOM_KMER_TABLE}"
fi

if [[ "${SAMTOOLS}" != "samtools" ]]
then
    OPTIONS="${OPTIONS} -S ${SAMTOOLS}"
fi

if [[ "${BWA}" != "bwa" ]]
then
    OPTIONS="${OPTIONS} -B ${BWA}"
fi

if (( PREPROCESSING == 0 ))
then
    OPTIONS="${OPTIONS} --no-prep"
fi

if [[ ${#INPUT_KMER_CUTOFF} != 0 ]]
then
    KMER_CUTOFF=${INPUT_KMER_CUTOFF}
fi


OPTIONS="${OPTIONS} -t ${THREADS}"
OPTIONS="${OPTIONS} -l ${KMER_SIZE}"
OPTIONS="${OPTIONS} -K ${KMER_CUTOFF}"
OPTIONS="${OPTIONS} --max-kmer ${MAXK}"
OPTIONS="${OPTIONS} --bwa-T ${BWA_T}"

## Run etching_filter
## INPUT: sequencing data (fastq or bam), indexed reference genome, k-mer database (KMC built)
## OUTPUT: ${PREFIX}.sort.bam, ${PREFIX}_1.fastq, ${PREFIX}_2.fastq

cmd="etching_filter ${REQUIRED} ${OPTIONS} > ${LOGDIR}/ETCHING_FILTER.log 2>&1"
COMMAND ${ETCHING} ${LINENO} $cmd
ETCHING_FILTER_OUTPUT=${PREFIX}.sort.bam


#######################################################################################################################
#
# Additional filtration steps for BAM or CRAM
#

ETCHING_CALLER_INPUT=${ETCHING_FILTER_OUTPUT}
if [[ "${RUN_MODE}" != "fastq" ]] && [[ "${BAM_MODE}" == "default" ]]
then
    if (( ${#FILTER} + ${#BAM_CONT} + ${#CRAM_CONT} > 0 ))
    then
	PRECALL_FOR_DEFAULT_BAM_CRAM ${ETCHING} ${LINENO}
	ETCHING_CALLER_INPUT=${PREFIX}.precall.bam
    fi
fi

#######################################################################################################################
#
# CALLER
#

echo 
echo -e "## --------------------------------------------------------------------------------------------"
echo -e "## [CALLER]"

## Run etching_caller
OUTPUT_0_PREFIX=${PREFIX}
OUTPUT_0=${OUTPUT_0_PREFIX}.vcf

cmd="etching_caller -b ${ETCHING_CALLER_INPUT} -g ${GENOME} -o ${OUTPUT_0_PREFIX} -O ${ORIENT} -B >> ${LOGDIR}/ETCHING_CALLER.log 2>&1"
COMMAND ${ETCHING} ${LINENO} $cmd
COMMAND ${ETCHING} ${LINENO} mv ${OUTPUT_0_PREFIX}.BND.vcf ${OUTPUT_0}

######################################################################################################################
#
# SORTER
#

NUMBER_OF_SV=$(grep -v "#" ${OUTPUT_0} | wc -l | awk '{print $1}')

## Skip etching_sorter if no SV predicted
if (( NUMBER_OF_SV == 0 ))
then
    echo
    echo -e "## Note!!!"
    echo -e "## No SV was detected."
    OUTPUT_1=${OUTPUT_0}
else
    echo
    echo -e "## --------------------------------------------------------------------------------------------"
    echo -e "## [SORTER]"

    ## run etching_sorter for BND.vcf
    OUTPUT_1_PREFIX=${OUTPUT_0_PREFIX}.scored
    OUTPUT_1=${OUTPUT_1_PREFIX}.vcf
    cmd="etching_sorter -i ${OUTPUT_0} -o ${OUTPUT_0_PREFIX} -c ${CUTOFF} -p ${ETCHING_ML_PATH}/${ML_PREFIX} ${ALGOR} > ${LOGDIR}/ETCHING_SORTER.log"
    COMMAND ${ETCHING} ${LINENO} $cmd
fi

#######################################################################################################################
#
# Do following steps if SVs were predicted.
#

if (( NUMBER_OF_SV != 0 ))
then
    #######################################################################################################################
    #
    # Remove artefacts (germline SVs near somatic SNV/indels), if matched normal data was provided.
    #
    if (( ${#FIRST_CONT} + ${#SECOND_CONT} + ${#BAM_CONT} + ${#CRAM_CONT} > 0 ))
    then
	echo 
	echo -e "## --------------------------------------------------------------------------------------------"
	echo -e "## [Remove artefacts]"

	# function defined in etching_function.sh
        FIND_SV_SUPPORTING_KMERS_FROM_NORMAL_FOR_REMOVING_ARTEFACTS ${ETCHING} ${LINENO}
	
	## run etching_caller to remove artefacts
	cmd="etching_caller -b ${SUPPORTING_PREFIX}.cont.sort.bam -o ${SUPPORTING_PREFIX}.artefact -g ${GENOME} -B >> ${LOGDIR}/REMOVE_ARTEFACT.log 2>&1 "
	COMMAND ${ETCHING} ${LINENO} $cmd
	COMMAND ${ETCHING} ${LINENO} mv ${SUPPORTING_PREFIX}.artefact.BND.vcf ${SUPPORTING_PREFIX}.artefact.vcf
	
	## remove remaining germline SVs
	OUTPUT_1_PREFIX=${PREFIX}.scored.cleaned
	OUTPUT_1=${OUTPUT_1_PREFIX}.vcf
	cmd="remove_overlapping_sv ${PREFIX}.scored.vcf ${SUPPORTING_PREFIX}.artefact.vcf > ${OUTPUT_1} 2>> ${LOGDIR}/REMOVE_ARTEFACT.log"
	COMMAND ${ETCHING} ${LINENO} $cmd
    fi

    #######################################################################################################################
    #
    # Applying cutoff
    #

    OUTPUT_2_PREFIX=${OUTPUT_1_PREFIX}.filtered
    OUTPUT_2=${OUTPUT_2_PREFIX}.vcf
    COMMAND ${ETCHING} ${LINENO} "cut_by_score ${OUTPUT_1} ${CUTOFF} > ${OUTPUT_2}"

    #######################################################################################################################
    #
    # Typing SVs
    #

    OUTPUT_3_PREFIX=${OUTPUT_2_PREFIX}.typed
    OUTPUT_3=${OUTPUT_3_PREFIX}.vcf
    COMMAND ${ETCHING} ${LINENO} "etching_typer ${OUTPUT_2} ${GENOME}.fai > ${OUTPUT_3}"

    #######################################################################################################################
    #
    # FG_IDENTIFIER
    #

    if [[ ${#ANNOTATION} != 0 ]]
    then
	## set options for etching_fg_identifier
	OPTIONS="--fusion-window ${FUSION_WINDOW}"

	if (( ${#STRAND_AWARE} != 0 ))
	then
	    OPTIONS="${OPTIONS} -s"
	fi
	
	## Run etching_fg_identifier
	echo
	echo -e "## [FG_IDENTIFIER]"
	
	OUTPUT_4_PREFIX=${OUTPUT_2_PREFIX}.fusion_gene
	cmd="etching_fg_identifier -i ${OUTPUT_2} -a ${ANNOTATION} -o ${OUTPUT_4_PREFIX}.txt ${OPTIONS} 2> ${LOGDIR}/ETCHING_FG_IDENTIFIER.log"
	COMMAND ${ETCHING} ${LINENO} $cmd
	OUTPUT_4=${OUTPUT_4_PREFIX}.txt
    fi
fi

#######################################################################################################################
#
# Copy results to OUTDIR
#

echo
echo -e "## --------------------------------------------------------------------------------------------"
echo -e "## [Copy results to output directory]"

## copy result files to the directory where the user was
if [[ ${WORKDIR} != ${OUTDIR} ]]
then
    for i in $OUTPUT_1 $OUTPUT_2 $OUTPUT_3 $OUTPUT_4
    do
	if [[ -f ${i} ]]
	then
	    COMMAND ${ETCHING} ${LINENO} cp ${i} ${OUTDIR}
	fi
    done
fi



if (( KEEP_KMC == 0 ))
then
    echo -e
    echo -e "## --------------------------------------------------------------------------------------------"
    echo -e "## Remove tumor and normal KMC files to save storage"
    COMMAND ${ETCHING} ${LINENO} rm -f *kmc_pre *kmc_suf
fi


echo -e
echo -e "## --------------------------------------------------------------------------------------------"
echo -e "## Exit working directory"
COMMAND ${ETCHING} ${LINENO} cd ${PRESENT_DIR}/
echo

## print the information of result files
echo -e "## --------------------------------------------------------------------------------------------"
echo -e "## [Final results]"
echo -e "## [$(date)]"
echo -e "##"
echo -e "## Output directory:"
echo -e "## ${OUTDIR}"
if [[ -f ${OUTDIR}/${OUTPUT_1} ]]
then
    echo -e "##"
    echo -e "## Main result:"
    echo -e "## ${OUTPUT_1}"
    if [[ "${REMOVE_ARTEFACT}" == "yes" ]]
    then
	echo -e "##    Generated by etching_filter, etching_caller, etching_sorter, and artefact-filtering steps."
    else
	echo -e "##    Generated by etching_filter, etching_caller, and etching_sorter."
    fi
    echo -e "##    Low-score SVs (<${CUTOFF}) were assigned to \"LOWQUAL\"."
    echo -e "##"
fi

if [[ -f ${OUTDIR}/${OUTPUT_2} ]]
then
    echo -e "##"
    echo -e "## Filtered by score:"
    echo -e "## ${OUTPUT_2}"
    echo -e "##    Generated by cut_by_score."
    echo -e "##    LOWQUAL SVs were removed."
fi

if [[ -f ${OUTDIR}/${OUTPUT_3} ]]
then
    echo -e "##"
    echo -e "## SV-typed:"
    echo -e "## ${OUTPUT_3}"
    echo -e "##    Generated by etching_typer."
    echo -e "##    DELs, DUPs, and INVs were annotated based on ${OUTPUT_2}."
    echo -e "##"
fi

if [[ -f ${OUTDIR}/${OUTPUT_4} ]]
then
    echo -e "##"
    echo -e "## Fusion-genes:"
    echo -e "## ${OUTPUT_4}"
    echo -e "##    Generated by etching_fg_indendifier."
    echo -e "##    Fugion-genes were predicted by SVs (${OUTPUT_2}) on a genome level (${GENOME})."
fi
echo
echo -e "## --------------------------------------------------------------------------------------------"
echo -e "## [ETCHING END]"
DATE
echo -e "## --------------------------------------------------------------------------------------------"


exit 0
