#############################
#
# Print Usage
#

DEFAULT_ML_PATH=$(echo ${0} | sed "s/etching$/ETCHING_ML_model/")
function ETCHING_USAGE {
    echo -e "etching (${ETCHING_VERSION})"
    echo -e 
    echo -e "[Usage]"
    echo -e "\tFASTQ:  etching [options] -1 tumor_1.fq -2 tumor_2.fq -g reference.fa [options]"
    echo -e "\tBAM:    etching [options] -b tumor.sorted.bam -g reference.fa [options]"
    echo -e "\tCRAM:   etching [options] -b tumor.sorted.cram -g reference.fa [options]"
    echo -e "\t            Note: CRAM requires tumor.sorted.cram.crai"
    echo -e "\t            Note: Match file formats of tumor and normal for each mode"
    echo -e 
    echo -e "[Required]"
    echo -e "\t-1  FILE    First fastq of tumor sample (.gz support)"
    echo -e "\t-2  FILE    Second fastq of tumor sample (.gz support)"
    echo -e "\t            Note: -1 and -2 must be used together"
    echo -e "\t-b  FILE    Tumor BAM (.cram support)"
    echo -e "\t            Note: Do not use this with -1 or -2"
    echo -e "\t-g  FILE    BWA indexed reference genome"
    echo -e
    echo -e "[Matched normal options]"
    echo -e "\t-1c FILE    First fastq of matched normal sample (.gz support)"
    echo -e "\t-2c FILE    Second fastq of matched normal sample (.gz support)"
    echo -e "\t            Note: -1c and -2c must be used together with -1 and -2"
    echo -e "\t-bc FILE    Normal BAM (.cram support)"
    echo -e "\t            Note: -bc must be used with -b"
    echo -e 
    echo -e "[General options]"
    echo -e "\t-o  STRING  Prefix of output files [${PREFIX}]"
    echo -e "\t--output-dir  DIR"
    echo -e "\t            Output directory [${OUTDIR}]"
    echo -e "\t--work-dir    DIR"
    echo -e "\t            Working directory [${WORKDIR_MES}]"
    echo -e "\t-t  INT     Number of threads [${THREADS}]"
    echo -e "\t-K  INT     K-mer frequency cut-off for k-mer set [${KMER_CUTOFF}]"
    echo -e "\t            Use \"-K 3\" for better recall"
    #echo -e "\t            [${KMER_CUTOFF} for fastq, ${KMER_CUTOFF_BAM} for bam/cram]"]""
    echo -e "\t-f  STRING  Prefix of pan-genome k-mer set (PGK)"
    echo -e "\t            Use \"-f PGK\" for PGK.kmc_pre and PGK.kmc_suf"
    echo -e "\t            Note: We recommend using PGK2 (http://big.hanyang.ac.kr/ETCHING/)" 
    echo -e 
    echo -e "[FP removal options]"
    echo -e "\t-R          Use Random Forest models [default]"
    echo -e "\t-X          Use XGBoost models"
    echo -e "\t-C  FLOAT   SV score cutoff from 0.0 to 1.0 (same with --cutoff) [${CUTOFF}]"
    echo -e "\t-m  DIR     /path/to/machine_learning_model [${DEFAULT_ML_PATH}]"
    echo -e 
    echo -e "[Fusion-gene prediction options]"
    echo -e "\t-a  FILE    Annotation file (gtf format) for fusion-gene prediction on a genome level"
    echo -e "\t--strand-aware"
    echo -e "\t            Predict fusion-genes considering strands"
    echo -e "\t--fusion-window INT"
    echo -e "\t            Window size for fusion-gene prediction [${FUSION_WINDOW}]"
    echo -e 
    echo -e "[Miscellaneous]"
    echo -e "\t-S  FILE    /path/to/samtools (>=${REQUIRED_SAMTOOLS_VERSION} using htslib >=${REQUIRED_SAMTOOLS_VERSION})"
    echo -e "\t            Ex) \"-S /home/user/bin/samtools\" or \"-S ../bin/samtools\""
    echo -e "\t-B  FILE    /path/to/bwa"
    echo -e "\t            Ex) \"-B /home/user/bin/bwa\" or \"-B ../bin/bwa\""
    echo -e "\t--bwa-T INT BWA MEM option \"-T\" [${BWA_T}]"
    echo -e "\t            Use \"--bwa-T 0\" for better recall"
    echo -e "\t--keep-kmc  Keep k-mer DB files (.kmc_pre and .kmc_suf) generated by KMC for reuse,"
    echo -e "\t            else remove them to save storage"
    echo -e "\t--no-prep   No preprocessing for quality control"
    echo -e "\t--fast-bam  Fast mode for bam/cram input"
    echo -e "\t            Note: Recall rate may decrease little bit"
    echo -e "\t--orientation STRING"
    echo -e "\t            Read-orientation FR or RF. [${ORIENT}]"
    echo -e "\t--kmer-table  FILE"
    echo -e "\t            Custom k-mer table"
    echo -e "\t            This option skips the process making tumor specific k-mer set"
    echo -e "\t            The file must have two columns as follows without header:"
    echo -e "\t            AACCTAACCTAACCTAACCTAACCTAACCTG\t14"
    echo -e "\t            AACCTAACCTAACCTAACCTAACCTAACCAA\t12"
    echo -e 
    echo -e "\t-h, --help  Print usage"
    echo -e "\t--example   Show examples"
    echo -e "\t-v, --version"
    echo -e "\t            Print version"
    echo -e 
    echo -e "[Contact]"
    echo -e ${CONTACT}
    echo -e
}


function EXAMPLE {
    echo -e "## ----------------------------------------------------------------------------------------------------------"
    echo -e "## ETCHING examples for DEMO"
    echo -e 
    echo -e "## Note:"
    echo -e "## Even if you don't have normal sequencing data, ETCHING can predict somatic SVs with pretty high recall"
    echo -e "## and precision rates by using PGK2 (http://big.hanyang.ac.kr/ETCHING/). Its performance without normal data"
    echo -e "## is comparable with other state-of-art somatic SV callers requiring normal data. In the following example,"
    echo -e "## replace demo_PGK with PGK2 for real data. When you download PGK2, you will have PGK2.kmc_pre and"
    echo -e "## PGK2.kmc_suf. Then, type like \"-f PGK2\" (or\"-f /path/to/PGK2\")."
    echo -e 
    echo -e "## Requirement for running ETCHING:"
    echo -e "## samtools (>=${REQUIRED_SAMTOOLS_VERSION}) and bwa"
    echo -e 
    echo -e "## ----------------------------------------------------------------------------------------------------------"
    echo -e "## Get demo"
    echo -e
    echo -e "wget http://big.hanyang.ac.kr/ETCHING/DEMO.tar.gz"
    echo -e "tar zxvf DEMO.tar.gz"
    echo -e "cd DEMO"
    echo -e
    echo -e "## or"
    echo -e
    echo -e "wget http://big.hanyang.ac.kr/ETCHING/tiny_DEMO.tar.gz"
    echo -e "tar zxvf tiny_DEMO.tar.gz"
    echo -e "cd tiny_DEMO"
    echo -e
    echo -e "## ----------------------------------------------------------------------------------------------------------"
    echo -e "## FASTQ input with matched normal"
    echo -e
    echo -e "etching -1 tumor_1.fq -2 tumor_2.fq -1c normal_1.fq -2c normal_2.fq \\"
    echo -e "-g small_genome.fa -a small_genome.gtf -f demo_PGK -o example_1 -t 8"
    echo -e 
    echo -e "## ----------------------------------------------------------------------------------------------------------"
    echo -e "## Somatic SV prediction without matched normal sequencing data"
    echo -e
    echo -e "etching -1 tumor_1.fq -2 tumor_2.fq \\"
    echo -e "-g small_genome.fa -a small_genome.gtf -f demo_PGK -o example_2 -t 8"
    echo -e 
    echo -e "## ----------------------------------------------------------------------------------------------------------"
    echo -e "## BAM input"
    echo -e
    echo -e "etching -b tumor.sort.bam -bc normal.sort.bam \\"
    echo -e "-g small_genome.fa -a small_genome.gtf -f demo_PGK -o example_3 -t 8"
    echo -e
    echo -e "## ----------------------------------------------------------------------------------------------------------"
    echo -e "## CRAM input"
    echo -e
    echo -e "etching -b tumor.sort.cram -bc normal.sort.cram \\"
    echo -e "-g small_genome.fa -a small_genome.gtf -f demo_PGK -o example_4 -t 8"
    echo -e
    echo -e "## ----------------------------------------------------------------------------------------------------------"
    echo -e "[Contact]"
    echo -e ${CONTACT}
    echo -e
}



function FILTER_USAGE {
    echo -e "Usage: etching_filter [options]"
    echo -e
    echo -e "[Required]"
    echo -e "\t-1  FILE    First fastq file of tumor paired-end"
    echo -e "\t-2  FILE    Second fastq file of tumor paired-end"
    echo -e "\t            -1 and -2 must be used together"
    echo -e "\t-b  FILE    Aligned tumor bam file of paired-end"
    echo -e "\t            Do not use this with -1 or -2"
    echo -e "\t-g  FILE    BWA indexed reference genome"
    echo -e
    echo -e "[Options]"
    echo -e "\t-1c FILE    First fastq file of paried-end"
    echo -e "\t-2c FILE    Second fastq file of paried-end"
    echo -e "\t-bc FILE    Aligned bam file of paried-end"
    echo -e "\t-f  STRING  Prefix of pan-genome k-mer set"
    echo -e "\t            Note: If you have /path/to/PGK.kmc_pre and /path/to/PGK.kmc_suf,"
    echo -e "\t            use \"-f /path/to/PGK\""
    echo -e "\t            Note: We recommend using PGK2 (http://big.hanyang.ac.kr/ETCHING/)" 
    echo -e "\t--kmer-table  FILE"
    echo -e "\t            Custom sample specific k-mer table"
    echo -e "\t-o  STRING  Prefix of output [${PREFIX}]"
    echo -e "\t-t  INT     Number of threads [${THREADS}]"
    echo -e "\t-l  INT     k-mer size (<=32) [${KMER_SIZE}]"
    echo -e "\t            Please check k-mer size before using -f option"
    echo -e "\t            Our default k-mer size of PGK is 31"
    echo -e "\t--bwa-T INT BWA MEM option \"T\" [${BWA_T}]"
    echo -e "\t            Note: Use \"--bwa-T 0\" for better recall"
    echo -e "\t-K  INT     K-mer frequency cut-off [${KMER_CUTOFF}]"
    echo -e "\t            The lesser, the more sensitive; the more, the more specific"
    echo -e "\t--max-kmer INT"
    echo -e "\t            Exclude the k-mers counted more than this [${MAXK}]"
    #echo -e "\t--split-only"
    #echo -e "\t            If bam mode (-b), use only split-reads (so-called chimeric)"
    echo -e "\t--no-prep   No preprocessing for quality control"
    echo -e "\t-S  FILE    /path/to/samtools (>=${REQUIRED_SAMTOOLS_VERSION} using htslib >=${REQUIRED_SAMTOOLS_VERSION})"
    echo -e "\t            Ex) \"-S /home/user/bin/samtools\" or \"-S ../bin/samtools\""
    echo -e "\t-B  FILE    /path/to/bwa"
    echo -e "\t            Ex) \"-B /home/user/bin/bwa\" or \"-B ../bin/bwa\""
    echo -e "\t-h          Print usage"
    echo -e
    echo -e "[Contact]"
    echo -e ${CONTACT}
    echo -e
}




function ABS_PATH (){
    if (( $# != 1 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## Syntax ERROR!!! ABS_PATH (in etching_funcion.sh) requires an argument."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    INPUT=$1
    if [[ -f ${INPUT} ]] 
    then
	INPUT_DIR=$(ls ${INPUT} | awk -F "/" 'NF{NF-=1};1' | sed 's/ /\//g')
	if [[ ${#INPUT_DIR} != 0 ]]
	then
	    INPUT_DIR=$(ABS_PATH ${INPUT_DIR})
	    INPUT_FILE=$(ls ${INPUT} | rev | cut -d'/' -f 1 | rev)
	    INPUT=${INPUT_DIR}/${INPUT_FILE}
	else
	    INPUT=$PWD/$INPUT
	fi
    else
	if [[ -d ${INPUT} ]]
	then
	    cd $INPUT
	    INPUT=$PWD
	    cd - > /dev/null
	fi
    fi
    
    echo $INPUT
}



function CHECK_ETCHING (){
    # CHECKING REQUIRED PROGRAMS
    for i in cut_by_length cut_by_score etching etching_caller etching_fg_identifier etching_filter etching_sorter etching_typer kmc kmc_dump kmc_tools kmer_table_generator make_pgk read_collector remove_overlapping_sv target_filter
    do
	CHECK=$(which ${i})
	
	if [[ ${#CHECK} == 0 ]]
	then
	    echo -e "\033[31m## ------------------------------------"
	    echo -e "## ERROR!!! We cannot find ${i}"
	    echo -e "## ------------------------------------\033[0m"
	    exit 1
	fi
    done

    # CHECKING LD_LIBRARY_PATH
    for i in etching_caller etching_sorter etching_fg_identifier read_collector
    do
	CHECK=$(${i} 2> library_check.txt)
	CHECK=$(cat library_check.txt)
	if [[ ${#CHECK} != 0 ]]
	then
	    cat library_check.txt
	    echo -e "\033[31m## ------------------------------------"
	    echo -e "## ERROR!!! We cannot find the library for ${i}"
	    echo -e "## ------------------------------------\033[0m"
	    exit 1
	fi
	rm library_check.txt
    done
    echo -e "## Check ETCHING: PASS"
}



function CHECK_REQUIRED (){
    if (( CHECK_REQUIRED_CHECKED == 0 ))
    then

	CHECK_ETCHING

	## check bwa
	CHECK=$(which ${BWA} 2> /dev/null)
	if [[ ${#CHECK} == 0 ]]
	then
	    echo -e "\033[31m## ------------------------------------"
	    echo -e "## ERROR!!! We cannot find bwa."
	    echo -e "## ------------------------------------\033[0m"
	    exit 1
	fi

	## check samtools
	CHECK=$(which ${SAMTOOLS} 2> /dev/null)
	if [[ ${#CHECK} == 0 ]]
	then
	    echo -e "\033[31m## ------------------------------------"
	    echo -e "## ERROR!!! We cannot find samtools."
	    echo -e "## ------------------------------------\033[0m"
	    exit 1
	fi

	SAMTOOLS_VERSION_L1=$(${SAMTOOLS} --version | head -n1)
	SAMTOOLS_VERSION_L2=$(${SAMTOOLS} --version | head -n2 | tail -n1)

	for i in $(echo ${SAMTOOLS_VERSION_L1} ) ; do SAMTOOLS_VERSION=${i} ; done
	SAMTOOLS_VERSION_CHECK=$(echo -e "${REQUIRED_SAMTOOLS_VERSION}\n${SAMTOOLS_VERSION}" | sort -V | head -n1)
	if [ ${SAMTOOLS_VERSION_CHECK} != ${REQUIRED_SAMTOOLS_VERSION} ]
	then
	    echo -e "\033[31m## ------------------------------------"
	    echo -e "## ERROR!!! Required: samtools >=${REQUIRED_SAMTOOLS_VERSION} using htslib >=${REQUIRED_SAMTOOLS_VERSION}"
	    echo -e "## ------------------------------------\033[0m"
	    exit 1
	fi

	for i in $(echo ${SAMTOOLS_VERSION_L2} ) ; do SAMTOOLS_HTS_VERSION=${i} ; done
	SAMTOOLS_HTS_VERSION_CHECK=$(echo -e "${REQUIRED_SAMTOOLS_VERSION}\n${SAMTOOLS_HTS_VERSION}" | sort -V | head -n1)
	if [ ${SAMTOOLS_VERSION_CHECK} != ${REQUIRED_SAMTOOLS_VERSION} ]
	then
	    echo -e "\033[31m## ------------------------------------"
	    echo -e "## ERROR!!! Required: htslib >=${REQUIRED_SAMTOOLS_VERSION}"
	    echo -e "## ------------------------------------\033[0m"
	    exit 1
	fi
	CHECK_REQUIRED_CHECKED=1
    fi
}


function DATE (){
    echo "## [$(date)]"
}


function COMMAND (){
    if (( $# < 3 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## Syntax ERROR!!! COMMAND (defined in etching_function.sh) requires >=3 arguments."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi
    
    SCRIPT_FILE_NAME=$1
    LINE_NUMBER=$2
    cmd=${@:3}
    
    #echo "[$(date)] \$ ${cmd}"
    echo "[$(date "+%Y-%m-%d %H:%M:%S") ${USER}@$(hostname -s) $(pwd | sed "s|/|\n|g" | tail -n1)]\$ ${cmd}"
    eval $cmd
    STATUS=$(echo $?)
    if (( STATUS != 0 ))
    then
	echo
	echo -e "\033[31m## ------------------------------------"
	echo -e "##"
	echo -e "## Exit ETCHING by an error"
	echo -e "##"
	echo -e "## Failed in ${SCRIPT_FILE_NAME} line ${LINE_NUMBER}"
	echo -e "##"
	echo -e "## Command: $cmd"
	echo -e "##"
	DATE
	echo -e "##"
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi
}



function SET_ENVIRONMENT (){
    if (( SET_ENVIRONMENT_CHECKED == 0 ))
    then
	_LD_CHECK=$(printenv LD_LIBRARY_PATH | wc -l)
	if (( _LD_CHECK == 0 ))
	then
	    export LD_LIBRARY_PATH
	fi
	echo -e
	echo -e "## --------------------------------------------------------------------------------------------"
	echo -e "## [Set environment]"
	echo -e "ETCHING_PATH=${ETCHING_PATH}"
	echo -e "PATH=\${ETCHING_PATH}:\$PATH"
	echo -e "LD_LIBRARY_PATH=\${ETCHING_PATH}:\$LD_LIBRARY_PATH"
	echo
	PATH=${ETCHING_PATH}:$PATH
	LD_LIBRARY_PATH=${ETCHING_PATH}:$LD_LIBRARY_PATH
	ETCHING_ML_PATH=${ETCHING_PATH}/ETCHING_ML_model
	SET_ENVIRONMENT_CHECKED=1
    fi
}


function UPDATE_RUN_MODE (){
    if (( ${#FIRST} > 0 ))
    then
	RUN_MODE=fastq
    else
	if (( ${#BAM} > 0 ))
	then
            RUN_MODE=$(echo ${BAM} | sed "s/\./\n/g" | tail -n1)
	fi
    fi
}



function CHECK_OPTIONS (){
    #############################
    #
    # CHECK PREFIX
    #
    if (( $(echo ${PREFIX} | grep "\/" | wc -l ) != 0 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! Do not \"-o /path/to/PREFIX\", but \"-o PREFIX\""
	echo -e "## If you want to specify output directory, do \"--out-dir /path/to/\""
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    #############################
    #
    # CHECK ORIENTATION
    #
    if [[ "$ORIENT" != "FR" ]] && [[ "$ORIENT" != "RF" ]]
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! --orientation must be FR or RF"
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    #############################
    #
    # Setting algorithm parameter
    #
    if (( ALGOR_R == 1 )) && (( ALGOR_X == 1 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! -R and -X can not used together."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    # Setting default algorithm
    if (( ALGOR_R == 0 )) && (( ALGOR_X == 0 ))
    then
	ALGOR_R=1
    fi

    if (( ALGOR_R == 1 ))
    then
	ALGOR="-R"
    fi

    if (( ALGOR_X == 1 ))
    then
	ALGOR="-X"
    fi    
    
    if [[ "${ALGOR}" == "-R" ]]
    then
	ML_PREFIX="etching_rf_${MODEL_VERSION}"
	ML_SUFFIX="forest"
	CHECK=$(which ranger 2> /dev/null)
	if (( ${#CHECK} == 0 ))
	then
            echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! We cannot find ranger."
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi
    else
	if [[ "${ALGOR}" == "-X" ]]
	then
            ML_PREFIX="etching_xgb_${MODEL_VERSION}"
            ML_SUFFIX="model"
            CHECK=$(which xgboost 2> /dev/null)
            if (( ${#CHECK} == 0 ))
            then
		echo -e "\033[31m## ------------------------------------"
		echo -e "## ERROR!!! We cannot find xgboost."
		echo -e "## ------------------------------------\033[0m"
		exit 1
            fi
	fi
    fi


    if [[ ${#CUSTOM_KMER_TABLE} != 0 ]]
    then
	if [[ ${#filter} != 0 ]]
	then
            echo -e "\033[31m## ------------------------------------"
	    echo -e "## ERROR!!! Do not use --kmer-table with -f"
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi
	CUSTOM_KMER_TABLE=$(ABS_PATH ${CUSTOM_KMER_TABLE})
    fi

    if (( KMER_CUTOFF < 1 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! -K (or --k-mer-freq-cutoff) must be >0"
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi


    #if (( ${#WORKDIR} + ${#OUTDIR} != 0 ))
    #then
#	if [[ ${WORKDIR} == ${OUTDIR} ]]
#	then
#            echo -e "\033[31m## ------------------------------------"
#            echo -e "## ERROR!!! Do not use the same INPUT for --output-dir and --work-dir"
#            echo -e "## ------------------------------------\033[0m"
#            exit 1
#	fi
#    fi
}








function CHECK_REFERENCE_GENOME (){
    if [[ ! -f ${GENOME}.fai ]]
    then
	for i in amb ann bwt pac sa
	do
	    if [[ ! -f ${GENOME}.${i} ]]
	    then
		echo -e "\033[31m## ------------------------------------"
		echo -e "## ERROR!!! BWA indexed genome is required: Please check: ${GENOME}.${i}"
		echo -e "## ------------------------------------\033[0m"
		exit 1
	    fi
	    COMMAND $1 $2 ln -s ${GENOME}.${i}
	done
	COMMAND $1 $2 ln -s ${GENOME}
	GENOME=$(basename ${GENOME})
        COMMAND $1 $2 "${SAMTOOLS} faidx ${GENOME}"
    fi
}


function CHECK_FASTQ_INPUT (){
    if (( ${#FIRST} * ${#SECOND} == 0 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! No input (fastq). Please check command."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    if (( ${#BAM} + ${#BAM_CONT} > 0 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! Do not -b and/or -bc in FASTQ mode."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    if [[ "${BAM_MODE}" == "fast" ]]
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## Warning!!! Ignoring --fast-bam (because of fastq input)"
	echo -e "## ------------------------------------\033[0m"
	BAM_MODE="default"
    fi

    if [[ ! -f ${FIRST} ]]
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! File not found: ${FIRST}".
	echo -e "## ------------------------------------\033[0m"
	exit 1
    else
	FIRST=$(ABS_PATH $FIRST)
    fi

    if [[ ! -f ${SECOND} ]]
    then
	echo -e "\033[31m## ------------------------------------"
        echo -e "## ERROR!!! File not found: ${SECOND}".
	echo -e "## ------------------------------------\033[0m"
	exit 1
    else
	SECOND=$(ABS_PATH $SECOND)
    fi

    if (( ${#FIRST_CONT} + ${#SECOND_CONT} > 0 ))
    then
	if (( ${#FIRST_CONT} * ${#SECOND_CONT} == 0 ))
	then
	    echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! -1c and -2c must used together"
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi

	if [[ ! -f ${FIRST_CONT} ]]
	then
	    echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! File not found: ${FIRST_CONT}".
            echo -e "## ------------------------------------\033[0m"
            exit 1
	else
	    FIRST_CONT=$(ABS_PATH $FIRST_CONT)
	fi

	if [[ ! -f ${SECOND_CONT} ]]
	then
	    echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! File not found: ${SECOND_CONT}".
            echo -e "## ------------------------------------\033[0m"
            exit 1
	else
	    SECOND_CONT=$(ABS_PATH $SECOND_CONT)
	fi
    fi
}


function CHECK_BAM_INPUT (){
    if (( ${#BAM} == 0 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! No input (bam). Please check command."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    if (( ${#FIRST} + ${#SECOND} + ${#FIRST_CONT} + ${#SECOND_CONT} > 0 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! Do not use -1, -2, -1c, or -2c in BAM mode"
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    if [[ ! -f ${BAM} ]]
    then
	echo -e "\033[31m## ------------------------------------"
        echo -e "## ERROR!!! File not found: ${BAM}".
	echo -e "## ------------------------------------\033[0m"
	exit 1
    else
	if [[ ! -f ${BAM}.bai ]]
	then
	    echo -e "\033[31m## ------------------------------------"
	    echo -e "## ERROR!!! File not found: ${BAM}.bai"
	    echo -e "## ------------------------------------\033[0m"
	    exit 1
	fi
	BAM=$(ABS_PATH ${BAM})
    fi

    if (( ${#BAM_CONT} > 0 ))
    then
	if [[ ! -f ${BAM_CONT} ]]
	then
	    echo -e "\033[31m## ------------------------------------"
	    echo -e "## ERROR!!! File not found: ${BAM_CONT}".
	    echo -e "## ------------------------------------\033[0m"
	    exit 1
	else
	    if [[ $(echo ${BAM_CONT} | sed "s/\./\n/g" | tail -n1) != "bam" ]]
	    then
		echo -e "\033[31m## ------------------------------------"
		echo -e "## ERROR!!! -bc file format must be .bam in BAM mode"
		echo -e "## ------------------------------------\033[0m"
		exit 1
	    fi
	    if [[ ! -f ${BAM_CONT}.bai ]]
	    then
		echo -e "\033[31m## ------------------------------------"
		echo -e "## ERROR!!! File not found: ${BAM_CONT}.bai"
		echo -e "## ------------------------------------\033[0m"
		exit 1
	    fi
	    BAM_CONT=$(ABS_PATH ${BAM_CONT})
	fi
    fi
}



function CHECK_CRAM_INPUT (){
    if (( ${#CRAM} == 0 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! No input (cram). Please check command."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    if (( ${#FIRST} + ${#SECOND} + ${#FIRST_CONT} + ${#SECOND_CONT} > 0 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! Do not use -1, -2, -1c, or -2c in CRAM mode"
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    if [[ ! -f ${CRAM} ]]
    then
	echo -e "\033[31m## ------------------------------------"
        echo -e "## ERROR!!! File not found: ${CRAM}".
	echo -e "## ------------------------------------\033[0m"
	exit 1
    else
	if [[ ! -f ${CRAM}.crai ]]
	then
	    echo -e "\033[31m## ------------------------------------"
	    echo -e "## ERROR!!! File not found: ${CRAM}.crai"
	    echo -e "## ------------------------------------\033[0m"
	    exit 1
	fi
	CRAM=$(ABS_PATH ${CRAM})
    fi

    if (( ${#CRAM_CONT} > 0 ))
    then
	if [[ ! -f ${CRAM_CONT} ]]
	then
	    echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! File not found: ${CRAM_CONT}".
	    echo -e "## ------------------------------------\033[0m"
	    exit 1
	else
	    if [[ $(echo ${CRAM_CONT} | sed "s/\./\n/g" | tail -n1) != "cram" ]]
	    then
		echo -e "\033[31m## ------------------------------------"
		echo -e "## ERROR!!! -bc file format must be .cram in CRAM mode"
		echo -e "## ------------------------------------\033[0m"
		exit 1
	    fi
	    if [[ ! -f ${CRAM_CONT}.crai ]]
	    then
		echo -e "\033[31m## ------------------------------------"
		echo -e "## ERROR!!! File not found: ${CRAM_CONT}.crai"
		echo -e "## ------------------------------------\033[0m"
		exit 1
	    fi
	    CRAM_CONT=$(ABS_PATH ${CRAM_CONT})
	fi

    fi
}





function CHECK_FILES (){
    if (( $# != 2 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## Syntax ERROR!!! CHECK_FILES (defined in etching_funcion.sh) requires two arguments."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    SCRIPT_FILE_NAME=$1
    LINE_NUMBER=$2
    
    if (( ${#GENOME} == 0 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! -g (reference_genome) is required"
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    if [[ ! -f ${GENOME} ]]
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## ERROR!!! No reference genome: $GENOME"
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    GENOME=$(ABS_PATH ${GENOME})

    if [[ ${RUN_MODE} == "fastq" ]]
    then
	CHECK_FASTQ_INPUT
    fi

    if [[ ${RUN_MODE} == "bam" ]]
    then
	CHECK_BAM_INPUT
    fi

    if [[ ${RUN_MODE} == "cram" ]]
    then
	CRAM=${BAM}
	BAM=
	CRAM_CONT=${BAM_CONT}
	BAM_CONT=
	CHECK_CRAM_INPUT
    fi
    
    #############################
    #
    # Check if --kmer-table option was used with controls (-1c, -2c, or -bc)
    #

    if (( ${#CUSTOM_KMER_TABLE} != 0 ))
    then
	if (( ${#FIRST_CONT} + ${#SECOND_CONT} + ${#BAM_CONT} != 0 + ${#CRAM_CONT} ))
	then
            echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! Do not use --kmer-table option with -1c, -2c, or -bc."
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi
    fi
    
    #############################
    #
    # CHECK ANNOTATION
    #
    if (( ${#ANNOTATION} != 0 ))
    then
	if [[ ! -f ${ANNOTATION} ]]
	then
            echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! File not found: ${ANNOTATION}"
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi
	ANNOTATION=$(ABS_PATH ${ANNOTATION})
    fi


    if [[ ${#FILTER} != 0 ]]
    then
	filter=$FILTER

	FILTER_PRE=${FILTER}.kmc_pre
	FILTER_SUF=${FILTER}.kmc_suf

	FILTER_PRE=$(ABS_PATH $FILTER_PRE)
	FILTER_SUF=$(ABS_PATH $FILTER_SUF)

	if [[ ! -f $FILTER_PRE ]]
	then
            echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! We cannot find $FILTER_PRE"
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi

	if [[ ! -f $FILTER_SUF ]]
	then
            echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! We cannot find $FILTER_SUF"
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi

	FILTER=$(echo $FILTER_PRE | sed "s/.kmc_pre$//")
    fi

    
    # Check machine learning model files
    for i in {1..10}
    do
	if [[ ! -f ${ETCHING_ML_PATH}/${ML_PREFIX}_${i}.${ML_SUFFIX} ]]
	then
            if [[ -f ${ETCHING_ML_PATH}/${ML_PREFIX}_${i}.${ML_SUFFIX}.gz ]]
            then
		cmd="gzip -dc ${ETCHING_ML_PATH}/${ML_PREFIX}_${i}.${ML_SUFFIX}.gz > ${ETCHING_ML_PATH}/${ML_PREFIX}_${i}.${ML_SUFFIX}"
		COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
            else
		echo -e "\033[31m## ------------------------------------"
		echo -e "## ERROR!!! We cannot find ${ETCHING_ML_PATH}/${ML_PREFIX}_${i}.${ML_SUFFIX}.gz"
		echo -e "## ------------------------------------\033[0m"
		exit 1
            fi
	fi
    done
}




function SET_DIRECTORIES (){
    if (( $# != 2 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## Syntax ERROR!!! CHECK_FILES (defined in etching_funcion.sh) requires two arguments."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    SCRIPT_FILE_NAME=$1
    LINE_NUMBER=$2

    OUTDIR=$(echo ${OUTDIR} | sed "s|/$||")
    if [[ ! -d ${OUTDIR} ]]
    then
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} mkdir -p $OUTDIR
    else
	TEST_FILE=$(echo ${OUTDIR}/test_$(date) | sed "s/ /_/g" | sed "s/:/_/g")
	touch ${TEST_FILE}
	if (( $(echo $?) != 0 ))
	then
	    echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! You do not have permission for the directory: ${OUTDIR}"
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi
	rm -f ${TEST_FILE}
    fi

    if [[ ${#WORKDIR} == 0 ]]
    then
	WORKDIR=${PREFIX}
    else
	WORKDIR=$(echo ${WORKDIR} | sed "s|/$||")
    fi
    LOGDIR=$(echo ${WORKDIR}/logs )

    if [[ ! -d ${WORKDIR} ]]
    then
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} mkdir -p ${WORKDIR}
    else
	TEST_FILE=$(echo ${WORKDIR}/test_$(date) | sed "s/ /_/g" | sed "s/:/_/g")
	touch ${TEST_FILE}
	if (( $(echo $?) != 0 ))
	then
            echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! You do not have permission for the directory: ${WORKDIR}"
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi
	rm -f ${TEST_FILE}
	echo -e "\033[31m## ------------------------------------"
        echo -e "## WARNING!!! All files and sub-directories in working directory (${WORKDIR}) are removed."
        echo -e "## ------------------------------------\033[0m"
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} rm -rf ${WORKDIR}/*
    fi

    if [[ ! -d ${LOGDIR} ]]
    then
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} mkdir -p ${LOGDIR}
    else
	TEST_FILE=$(echo ${LOGDIR}/test_$(date) | sed "s/ /_/g" | sed "s/:/_/g")
	touch ${TEST_FILE}
	if (( $(echo $?) != 0 ))
	then
            echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! You do not have permission for the directory: ${LOGDIR}"
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi
	rm -f ${TEST_FILE}
    fi

    OUTDIR=$(ABS_PATH ${OUTDIR})
    WORKDIR=$(ABS_PATH ${WORKDIR})
    LOGDIR=$(ABS_PATH ${LOGDIR})
}




## Internal function
## todo: to return command lines rather than execute them.
function BAM_PREP (){
    if (( $# != 7 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## Syntax ERROR!!! BAM_PREP (defined in etching_funcion.sh) requires 7 arguments."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi
    
    _SCRIPT_FILE_NAME=${1}
    _LINENO=${2}
    _BAM=${3}
    _SAMTOOLS=${4}
    _THREADS=${5}
    _FIRST=${6}
    _SECOND=${7}
    _BAM_PREFIX=$(echo ${_BAM} | sed "s/\//\n/g" | tail -n1)

    _SINGLETON=${_BAM_PREFIX}.singleton.fastq
    _BAM_DEAL=${_BAM_PREFIX}.DEAL.bam
    _BAM_DEAL_NSORTED=${_BAM_PREFIX}.DEAL.nsorted.bam
    _BAM_DEAL_ID_TABLE=${_BAM_PREFIX}.DEAL.id_table.txt

    _READ_LENGTH_FILE=${_BAM_PREFIX}.read_length.txt
    cmd="${_SAMTOOLS} view -@${_THREADS} ${_BAM} | head -n1000 | awk '{print length(\$10)}' > ${_READ_LENGTH_FILE}"
    COMMAND ${_SCRIPT_FILE_NAME} ${_LINENO} ${cmd}
    cmd="_READ_LENGTH=\$(for i in \$(sort -n ${_READ_LENGTH_FILE} | uniq) ; do _COUNT=\$(awk -v RL=\$i '\$1==RL' ${_READ_LENGTH_FILE} | wc -l) ; echo -e \"\${_COUNT}\t\${i}\" ; done | sort -nr | head -n1 | cut -f2)"
    COMMAND ${_SCRIPT_FILE_NAME} ${_LINENO} ${cmd}
    _BWA_SEED_LENGTH=19

    ## searching possible split-reads
    _AS_MIN=${_BWA_SEED_LENGTH}
    _AS_MAX=$(( _READ_LENGTH - _BWA_SEED_LENGTH ))
    _AS_VALUE_FILE=${_BAM_PREFIX}.AS_value.txt
    cmd="$(echo "for i in {${_AS_MIN}..${_AS_MAX}} ; do echo \$i ; done") > ${_AS_VALUE_FILE}"
    COMMAND ${_SCRIPT_FILE_NAME} ${_LINENO} ${cmd}
    cmd="${_SAMTOOLS} view -@${_THREADS} --tag-file AS:${_AS_VALUE_FILE} ${_BAM} 2> /dev/null | cut -f1 > ${_BAM_DEAL_ID_TABLE}"
    COMMAND ${_SCRIPT_FILE_NAME} ${_LINENO} ${cmd}

    ## searching discordant pairs
    cmd="${_SAMTOOLS} view -@${_THREADS} --excl-flags 2 ${_BAM} 2> /dev/null | cut -f1 >> ${_BAM_DEAL_ID_TABLE}"
    COMMAND ${_SCRIPT_FILE_NAME} ${_LINENO} ${cmd}

    ## searching unmapped reads (4 for read, 8 for mate, so 12)
    cmd="${_SAMTOOLS} view -@${_THREADS} --incl-flags 12 ${_BAM} 2> /dev/null | cut -f1 >> ${_BAM_DEAL_ID_TABLE}"
    COMMAND ${_SCRIPT_FILE_NAME} ${_LINENO} ${cmd}

    ## searching highly mismatched reads: NM >=10
    _NM_CUTOFF=10
    _NM_MAX=${_READ_LENGTH}
    _NM_VALUE_FILE=${_BAM_PREFIX}.NM_value.txt
    cmd="$(echo "for i in {${_NM_CUTOFF}..${_NM_MAX}} ; do echo \$i ; done") > ${_NM_VALUE_FILE}"
    COMMAND ${_SCRIPT_FILE_NAME} ${_LINENO} ${cmd}
    cmd="${_SAMTOOLS} view -@${_THREADS} --tag-file NM:${_NM_VALUE_FILE} ${_BAM} 2> /dev/null | cut -f1 >> ${_BAM_DEAL_ID_TABLE}"
    COMMAND ${_SCRIPT_FILE_NAME} ${_LINENO} ${cmd}

    COMMAND ${_SCRIPT_FILE_NAME} ${_LINENO} ${_SAMTOOLS} view -@${_THREADS} -bh -N ${_BAM_DEAL_ID_TABLE} -o ${_BAM_DEAL} ${_BAM}
    COMMAND ${_SCRIPT_FILE_NAME} ${_LINENO} ${_SAMTOOLS} sort -@${_THREADS} -n -o ${_BAM_DEAL_NSORTED} ${_BAM_DEAL} 2> /dev/null
    COMMAND ${_SCRIPT_FILE_NAME} ${_LINENO} ${_SAMTOOLS} fastq -@${_THREADS} -1 ${_FIRST} -2 ${_SECOND} -s ${_SINGLETON} ${_BAM_DEAL_NSORTED} 2> /dev/null
}


## Internal function
function CRAM_PREP (){
    if (( $# != 8 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## Syntax ERROR!!! CRAM_PREP (defined in etching_funcion.sh) requires 8 arguments."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi
    
    __SCRIPT_FILE_NAME=${1}
    __LINENO=${2}
    __CRAM=${3}
    __SAMTOOLS=${4}
    __THREADS=${5}
    __FIRST=${6}
    __SECOND=${7}
    __GENOME=${8}
    __BAM=$(echo ${__CRAM} | sed "s/\//\n/g" | tail -n1).bam

    COMMAND ${__SCRIPT_FILE_NAME} ${__LINENO} ${__SAMTOOLS} view -@${__THREADS} -bh -T ${__GENOME} -o ${__BAM} ${__CRAM}
    COMMAND ${__SCRIPT_FILE_NAME} ${__LINENO} BAM_PREP ${__SCRIPT_FILE_NAME} ${__LINENO} ${__BAM} ${__SAMTOOLS} ${__THREADS} ${__FIRST} ${__SECOND}
}



function BAM_PREPROCESSING (){
    if (( $# != 2 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## Syntax ERROR!!! BAM_PREPROCESSING (defined in etching_funcion.sh) requires two arguments."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi
    
    SCRIPT_FILE_NAME=$1
    LINE_NUMBER=$2

    for i in $(echo ${BAM} | sed "s/\//\n/g")
    do
        BAM_FNAME=${i}
    done
    BAM_PREFIX=$(echo ${BAM_FNAME} | sed "s/.bam//")
    FIRST=${BAM_PREFIX}.DEAL.1.fastq
    SECOND=${BAM_PREFIX}.DEAL.2.fastq
    BAM_PREP ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${BAM} ${SAMTOOLS} ${THREADS} ${FIRST} ${SECOND} &

    FIRST=$(ABS_PATH ${FIRST})
    SECOND=$(ABS_PATH ${SECOND})

    if [[ ${#BAM_CONT} != 0 ]]
    then
        for i in $(echo ${BAM_CONT} | sed "s/\//\n/g")
        do
            BAM_CONT_FNAME=${i}
        done
        BAM_CONT_PREFIX=$(echo ${BAM_CONT_FNAME} | sed "s/.bam//")
        FIRST_CONT=${BAM_CONT_PREFIX}.DEAL.1.fastq
        SECOND_CONT=${BAM_CONT_PREFIX}.DEAL.2.fastq
        BAM_PREP ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${BAM_CONT} ${SAMTOOLS} ${THREADS} ${FIRST_CONT} ${SECOND_CONT} &

        FIRST_CONT=$(ABS_PATH ${FIRST_CONT})
        SECOND_CONT=$(ABS_PATH ${SECOND_CONT})
    fi

    wait
}



function CRAM_PREPROCESSING (){
    if (( $# != 2 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## Syntax ERROR!!! CRAM_PREPROCESSING (defined in etching_funcion.sh) requires two arguments."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    SCRIPT_FILE_NAME=$1
    LINE_NUMBER=$2

    for i in $(echo ${CRAM} | sed "s/\//\n/g")
    do
        CRAM_FNAME=${i}
    done
    CRAM_PREFIX=$(echo ${CRAM_FNAME} | sed "s/.cram//")
    FIRST=${CRAM_PREFIX}.DEAL.1.fastq
    SECOND=${CRAM_PREFIX}.DEAL.2.fastq
    CRAM_PREP ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${CRAM} ${SAMTOOLS} ${THREADS} ${FIRST} ${SECOND} ${GENOME} &

    FIRST=$(ABS_PATH ${FIRST})
    SECOND=$(ABS_PATH ${SECOND})

    if [[ ${#CRAM_CONT} != 0 ]]
    then
        for i in $(echo ${CRAM_CONT} | sed "s/\//\n/g")
        do
            CRAM_CONT_FNAME=${i}
        done
        CRAM_CONT_PREFIX=$(echo ${CRAM_CONT_FNAME} | sed "s/.cram//")
        FIRST_CONT=${CRAM_CONT_PREFIX}.DEAL.1.fastq
        SECOND_CONT=${CRAM_CONT_PREFIX}.DEAL.2.fastq
        CRAM_PREP ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${CRAM_CONT} ${SAMTOOLS} ${THREADS} ${FIRST_CONT} ${SECOND_CONT} ${GENOME} &

        FIRST_CONT=$(ABS_PATH ${FIRST_CONT})
        SECOND_CONT=$(ABS_PATH ${SECOND_CONT})
    fi

    wait
}



function PRECALL_FOR_DEFAULT_BAM_CRAM (){
    if (( $# != 2 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## Syntax ERROR!!! PRECALL_FOR_DEFAULT_BAM_CRAM (defined in etching_funcion.sh) requires two arguments."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    SCRIPT_FILE_NAME=$1
    LINE_NUMBER=$2

    PRECALL_PREFIX=${PREFIX}.precall
    ETCHING_CALLER_PRECALL_INPUT=${ETCHING_FILTER_OUTPUT}
    cmd="etching_caller -b ${ETCHING_CALLER_PRECALL_INPUT} -g ${GENOME} -o ${PRECALL_PREFIX} -O ${ORIENT} --bp-pair > ${LOGDIR}/ETCHING_CALLER.log 2>&1"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
    PRECALL_OUTPUT_0=${PRECALL_PREFIX}.pair.txt

    PRECALL_BP_TARGET_BED=${PRECALL_PREFIX}.BP_target.bed
    cmd="cut -f1-4 ${PRECALL_OUTPUT_0} | awk '{print \$1\"\\t\"\$2\"\\n\"\$3\"\\t\"\$4}' | awk '\$1!=\".\" {chr=\$1;start=\$2-1200;end=\$2+1100;if(start<1) start=\$2;print(chr\"\t\"start\"\t\"end)}' | sort | uniq > ${PRECALL_BP_TARGET_BED}"
    #echo $cmd
    #eval $cmd
    #echo "[$(date "+%Y-%m-%d %H:%M:%S") ${USER}@$(hostname -s) $(pwd | sed "s|/|\n|g" | tail -n1)]\$ $cmd"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

    if [[ ${RUN_MODE} == "bam" ]]
    then
	PRECALL_SUPPORTING_PREFIX=$(echo ${BAM_FNAME} | sed "s/.bam$/.bp_support/")
	PRECALL_SUPPORTING_BAM=${PRECALL_SUPPORTING_PREFIX}.bam
	cmd="${SAMTOOLS} view -@${THREADS} -bh --target-file ${PRECALL_BP_TARGET_BED} ${BAM} -o ${PRECALL_SUPPORTING_BAM}"
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${SAMTOOLS} index ${PRECALL_SUPPORTING_BAM}
    else
	if [[ ${RUN_MODE} == "cram" ]]
	then
	    PRECALL_SUPPORTING_PREFIX=$(echo ${CRAM_FNAME} | sed "s/.cram$/.bp_support/")
	    PRECALL_SUPPORTING_BAM=${PRECALL_SUPPORTING_PREFIX}.cram
	    cmd="${SAMTOOLS} view -@${THREADS} -bh --target-file ${PRECALL_BP_TARGET_BED} -T ${GENOME} ${CRAM} -o ${PRECALL_SUPPORTING_BAM}"
	    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
	    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${SAMTOOLS} index ${PRECALL_SUPPORTING_BAM}
	else
	    echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! $0 (line ${LINE_NUMBER})::Unknown input file type"
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi
    fi

    PRECALL_SUPPORTING_FASTQ=${PRECALL_SUPPORTING_PREFIX}.fastq
    cmd="${SAMTOOLS} fastq -@${THREADS} -o ${PRECALL_SUPPORTING_FASTQ} ${PRECALL_SUPPORTING_BAM} 2> /dev/null"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

    PRECALL_SUPPORTING_SAMPLE=${PRECALL_SUPPORTING_PREFIX}.sample
    cmd="echo ${PRECALL_SUPPORTING_FASTQ} > ${PRECALL_SUPPORTING_SAMPLE}.list"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} mkdir -p tmp_${PREFIX}_PRECALL_SUPPORTING_SAMPLE
    cmd="kmc -v -k${KMER_SIZE} -t${THREADS} -m12 -cs255 -ci2 -fq @${PRECALL_SUPPORTING_SAMPLE}.list ${PRECALL_SUPPORTING_SAMPLE} tmp_${PREFIX}_PRECALL_SUPPORTING_SAMPLE >> ${LOGDIR}/ETCHING_CALLER.log 2>&1"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} rm -rf tmp_${PREFIX}_PRECALL_SUPPORTING_SAMPLE

    if (( ${#BAM_CONT} + ${#CRAM_CONT} > 0 ))
    then
	if [[ "${RUN_MODE}" == "bam" ]]
	then
	    if (( ${#BAM_CONT} > 0 ))
	    then
		PRECALL_SUPPORTING_CONT_PREFIX=$(echo ${BAM_CONT_FNAME} | sed "s/.bam$/.bp_support/")
		PRECALL_SUPPORTING_BAM_CONT=${PRECALL_SUPPORTING_CONT_PREFIX}.bam
		cmd="${SAMTOOLS} view -@${THREADS} -bh --target-file ${PRECALL_BP_TARGET_BED} ${BAM_CONT} -o ${PRECALL_SUPPORTING_BAM_CONT}"
	    else
		echo -e "\033[31m## ------------------------------------"
		echo -e "## ERROR!!! $0 (line ${LINE_NUMBER})::No input BAM_CONT"
		echo -e "## ------------------------------------\033[0m"
		exit 1
	    fi
	else
	    if [[ "${RUN_MODE}" == "cram" ]]
	    then
		if (( ${#CRAM_CONT} > 0 ))
		then
		    PRECALL_SUPPORTING_CONT_PREFIX=$(echo ${CRAM_CONT_FNAME} | sed "s/.cram$/.bp_support/")
		    PRECALL_SUPPORTING_BAM_CONT=${PRECALL_SUPPORTING_CONT_PREFIX}.cram
		    cmd="${SAMTOOLS} view -@${THREADS} -bh --target-file ${PRECALL_BP_TARGET_BED} -T ${GENOME} ${CRAM_CONT} -o ${PRECALL_SUPPORTING_BAM_CONT}"
		else
		    echo -e "\033[31m## ------------------------------------"
		    echo -e "## ERROR!!! $0 (line ${LINE_NUMBER})::No input CRAM_CONT"
		    echo -e "## ------------------------------------\033[0m"
		    exit 1
		fi
	    else
		echo -e "\033[31m## ------------------------------------"
		echo -e "## ERROR!!! $0 (line ${LINE_NUMBER})::Undefined RUN_MODE::${RUN_MODE}"
		echo -e "## ------------------------------------\033[0m"
		exit 1
	    fi
	fi
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${SAMTOOLS} index ${PRECALL_SUPPORTING_BAM_CONT}

	PRECALL_SUPPORTING_FASTQ_CONT=${PRECALL_SUPPORTING_CONT_PREFIX}.fastq
	cmd="${SAMTOOLS} fastq -@${THREADS} -o ${PRECALL_SUPPORTING_FASTQ_CONT} ${PRECALL_SUPPORTING_BAM_CONT} 2> /dev/null"
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

	PRECALL_SUPPORTING_CONTROL=${PRECALL_SUPPORTING_CONT_PREFIX}.control
	cmd="echo ${PRECALL_SUPPORTING_FASTQ_CONT} > ${PRECALL_SUPPORTING_CONTROL}.list"
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
	
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} mkdir -p tmp_${PREFIX}_PRECALL_SUPPORTING_CONTROL
	cmd="kmc -v -k${KMER_SIZE} -t${THREADS} -m12 -cs255 -ci2 -fq @${PRECALL_SUPPORTING_CONTROL}.list ${PRECALL_SUPPORTING_CONTROL} tmp_${PREFIX}_PRECALL_SUPPORTING_CONTROL >> ${LOGDIR}/ETCHING_CALLER.log 2>&1"
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
	COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} rm -r tmp_${PREFIX}_PRECALL_SUPPORTING_CONTROL	

	if [[ ${#FILTER} != 0 ]]
	then
	    PRECALL_FILTER_PREFIX=${PRECALL_SUPPORTING_CONTROL}.filter
	    cmd="kmc_tools simple ${PRECALL_SUPPORTING_CONTROL} ${FILTER} union ${PRECALL_FILTER_PREFIX} 2> /dev/null"
	    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
	else
	    PRECALL_FILTER_PREFIX=${PRECALL_SUPPORTING_CONTROL}
	fi
    else
	if [[ ${#FILTER} != 0 ]]
	then
	    PRECALL_FILTER_PREFIX=${FILTER}
	else
	    echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! $0 (line ${LINE_NUMBER})::"
            echo -e "## ------------------------------------\033[0m"
            exit 1
	fi
    fi

    #cmd="kmc_tools simple ${PRECALL_SUPPORTING_SAMPLE} ${PRECALL_FILTER_PREFIX} -ci1 kmers_subtract ${PRECALL_PREFIX} 2> /dev/null"
    cmd="kmc_tools simple ${PRECALL_SUPPORTING_SAMPLE} ${PRECALL_FILTER_PREFIX} kmers_subtract ${PRECALL_PREFIX} 2> /dev/null"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

    PRECALL_KMER_TABLE=${PRECALL_PREFIX}.kmer_table.txt
    cmd="kmc_dump -ci${KMER_CUTOFF} ${PRECALL_PREFIX} ${PRECALL_KMER_TABLE}"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

    cmd="read_collector -f ${PRECALL_KMER_TABLE} -1 ${PRECALL_SUPPORTING_FASTQ} -p ${PRECALL_PREFIX} -t ${THREADS} >> ${LOGDIR}/ETCHING_CALLER.log 2>&1"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

    cmd="awk 'NR%4==1' ${PRECALL_PREFIX}.fastq | cut -b2- > ${PRECALL_PREFIX}.id_table.txt"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

    if [[ "${RUN_MODE}" == "bam" ]]
    then
	cmd="${SAMTOOLS} view -@${THREADS} -bh -N ${PRECALL_PREFIX}.id_table.txt -o ${PRECALL_PREFIX}.bam ${BAM}"
    else
	if [[ "${RUN_MODE}" == "cram" ]]
	then
	    cmd="${SAMTOOLS} view -@${THREADS} -bh -N ${PRECALL_PREFIX}.id_table.txt -T ${GENOME} -o ${PRECALL_PREFIX}.bam ${CRAM}"
	else
	    echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! $0 (line ${LINE_NUMBER})::Undefined RUN_MODE::${RUN_MODE}"
            echo -e "## ------------------------------------\033[0m"
            exit 1	
	fi
    fi

    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${SAMTOOLS} index ${PRECALL_PREFIX}.bam
}




function FIND_SV_SUPPORTING_KMERS_FROM_NORMAL_FOR_REMOVING_ARTEFACTS (){
    if (( $# != 2 ))
    then
	echo -e "\033[31m## ------------------------------------"
	echo -e "## Syntax ERROR!!! FIND_SV_SUPPORTING_KMERS_FROM_NORMAL_FOR_REMOVING_ARTEFACTS (defined in etching_funcion.sh) requires two arguments."
	echo -e "## ------------------------------------\033[0m"
	exit 1
    fi

    SCRIPT_FILE_NAME=$1
    LINE_NUMBER=$2

    BP_TARGET_BED=${OUTPUT_0_PREFIX}.BP_target.bed
    SUPPORTING_PREFIX=${OUTPUT_0_PREFIX}.supporting
    SUPPORTING_BAM=${SUPPORTING_PREFIX}.bam

    cmd="grep -v \"#\" ${OUTPUT_1} | awk '{chr=\$1;start=\$2-200;end=\$2+100;if(start<1) start=\$2;print(chr\"\t\"start\"\t\"end)}' > ${BP_TARGET_BED}"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${SAMTOOLS} view -@${THREADS} -bh --target-file ${BP_TARGET_BED} ${ETCHING_CALLER_INPUT} -o ${SUPPORTING_BAM}
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${SAMTOOLS} index ${SUPPORTING_BAM}

    SUPPORTING_READ=${SUPPORTING_PREFIX}.fastq
    cmd="${SAMTOOLS} fastq -@${THREADS} -o ${SUPPORTING_READ} ${SUPPORTING_BAM} 2> /dev/null"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

    ## make k-mer database of extracted BP-reads
    if [[ ! -d tmp_${PREFIX}_REMOVE_ARTEFACT ]]
    then
        COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} mkdir -p tmp_${PREFIX}_REMOVE_ARTEFACT
    else
        TEST_FILE=$(echo tmp_${PREFIX}_REMOVE_ARTEFACT/test_$(date) | sed "s/ /_/g" | sed "s/:/_/g")
        touch ${TEST_FILE}
        if (( $(echo $?) != 0 ))
        then
            echo -e "\033[31m## ------------------------------------"
            echo -e "## ERROR!!! You do not have permission for the directory: tmp_${PREFIX}_REMOVE_ARTEFACT"
            echo -e "## ------------------------------------\033[0m"
            exit 1
        fi
        rm -f ${TEST_FILE}
    fi
    cmd="kmc -t${THREADS} -cx${MAXK} -k${KMER_SIZE} -v -fq ${SUPPORTING_READ} ${SUPPORTING_PREFIX} tmp_${PREFIX}_REMOVE_ARTEFACT >> ${LOGDIR}/REMOVE_ARTEFACT.log 2>&1"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} rm -rf tmp_${PREFIX}_REMOVE_ARTEFACT

    if [[ ${#FILTER} != 0 ]]
    then
        cmd="kmc_tools simple ${SUPPORTING_PREFIX} ${FILTER} kmers_subtract ${SUPPORTING_PREFIX}.filtered 2> /dev/null"
        COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
        SUPPORTING_PREFIX=${SUPPORTING_PREFIX}.filtered
    fi
    cmd="kmc_dump -ci${KMER_CUTOFF} ${SUPPORTING_PREFIX} ${SUPPORTING_PREFIX}.kmer_table.txt"
    COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

    
    if [[ "${RUN_MODE}" == "fastq" ]]
    then
        OPTIONS="-1 ${FIRST_CONT} -2 ${SECOND_CONT} --kmer-table ${SUPPORTING_PREFIX}.kmer_table.txt -p ${SUPPORTING_PREFIX}.cont -g ${GENOME}"

        if [[ "${SAMTOOLS}" != "samtools" ]]
        then
            OPTIONS="${OPTIONS} -S ${SAMTOOLS}"
        fi

        if [[ "${BWA}" != "bwa" ]]
        then
            OPTIONS="${OPTIONS} -B ${BWA}"
        fi

        if (( PREPROCESSING == 0 ))
        then
            OPTIONS="${OPTIONS} --no-prep"
        fi

        OPTIONS="${OPTIONS} -t ${THREADS}"
        OPTIONS="${OPTIONS} -l ${KMER_SIZE}"
        OPTIONS="${OPTIONS} --bwa-T ${BWA_T}"

        cmd="etching_filter ${OPTIONS} >> ${LOGDIR}/REMOVE_ARTEFACT.log 2>&1"
        COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

    else ## BAM or CRAM
        SUPPORTING_CONT_BAM=${OUTPUT_0_PREFIX}.BP_target.cont.bam
        if [[ "${RUN_MODE}" == "bam" ]]
        then
            cmd="${SAMTOOLS} view -@${THREADS} -bh --target-file ${BP_TARGET_BED} ${BAM_CONT} -o ${SUPPORTING_CONT_BAM}"
            COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
            COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${SAMTOOLS} index ${SUPPORTING_CONT_BAM}
        else
            cmd="${SAMTOOLS} view -@${THREADS} -bh --target-file ${BP_TARGET_BED} -T ${GENOME} ${CRAM_CONT} -o ${SUPPORTING_CONT_BAM}"
            COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
            COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${SAMTOOLS} index ${SUPPORTING_CONT_BAM}
        fi

        SUPPORTING_CONT_FASTQ=${OUTPUT_0_PREFIX}.BP_target.cont.fastq
        cmd="${SAMTOOLS} fastq -@${THREADS} -o ${SUPPORTING_CONT_FASTQ} ${SUPPORTING_CONT_BAM} 2> /dev/null"
        COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
        cmd="read_collector -1 ${SUPPORTING_CONT_FASTQ} -f ${SUPPORTING_PREFIX}.kmer_table.txt -p ${SUPPORTING_PREFIX}.cont -t ${THREADS} >> ${LOGDIR}/REMOVE_ARTEFACT.log 2>&1"
        COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
        cmd="awk 'NR%4==1' ${SUPPORTING_PREFIX}.cont.fastq | cut -b2- > ${SUPPORTING_PREFIX}.cont.id_table.txt"
        COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd

        if [[ "${RUN_MODE}" == "bam" ]]
        then
            cmd="${SAMTOOLS} view -@${THREADS} -bh -N ${SUPPORTING_PREFIX}.cont.id_table.txt -o ${SUPPORTING_PREFIX}.cont.sort.bam ${BAM_CONT}"
            COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
            COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${SAMTOOLS} index ${SUPPORTING_PREFIX}.cont.sort.bam
        else
            cmd="${SAMTOOLS} view -@${THREADS} -bh -N ${SUPPORTING_PREFIX}.cont.id_table.txt -T ${GENOME} -o ${SUPPORTING_PREFIX}.cont.sort.bam ${CRAM_CONT}"
            COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} $cmd
            COMMAND ${SCRIPT_FILE_NAME} ${LINE_NUMBER} ${SAMTOOLS} index ${SUPPORTING_PREFIX}.cont.sort.bam
        fi
    fi
}
